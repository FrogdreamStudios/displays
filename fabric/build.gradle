import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
	id 'fabric-loom' version '1.10.5'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = "ru.l0sty.dreamdisplays"

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation 'org.freedesktop.gstreamer:gst1-java-core:1.4.0'
	compileOnly 'net.java.dev.jna:jna:5.9.0'
	compileOnly 'net.java.dev.jna:jna-platform:5.9.0'
	compileOnly 'me.inotsleep:utils:1.4.6'

	implementation 'com.github.felipeucelli:javatube:6692a32'

	compileOnly("org.lwjgl:lwjgl:3.3.6")

	implementation(project(":common"))
}

shadowJar {
	// As default we use runtimeClasspath, but we can filter it
	dependencies {
		include(dependency('org.freedesktop.gstreamer:gst1-java-core'))
		exclude(dependency('net.java.dev.jna:jna'))
		exclude(dependency('net.java.dev.jna:jna-platform'))
		include(dependency('com.github.felipeucelli:javatube'))
		include(dependency('org.json:json'))
		include(dependency('me.inotsleep:utils'))
	}

	exclude 'org/objectweb/asm/**'
}

processResources {
	var replaceProperties = [
			"version"            : project.version,
			"minecraftVersion"   : minecraft_version,
			"fabricLoaderVersion": loader_version,
			"mod_id"             : mod_id
	]

	inputs.properties replaceProperties

	filesMatching(["fabric.mod.json", "version"]) {
		expand replaceProperties
	}
}

compileJava {
	options.encoding = 'UTF-8'
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

jar {
	from(rootProject.file('LICENSE'))
}

remapJar {
	dependsOn shadowJar
	input.set(shadowJar.archiveFile)

	archiveClassifier = "fabric"
	destinationDirectory.set(rootProject.layout.buildDirectory.dir("libs"))

	archiveBaseName = "displays-client"
}

tasks.named("shadowJar", ShadowJar) {
	dependsOn(project(":common").tasks.named("shadowJar"))
	from(project(":common").tasks.named("shadowJar").flatMap { it.archiveFile }.map { zipTree(it) })
}